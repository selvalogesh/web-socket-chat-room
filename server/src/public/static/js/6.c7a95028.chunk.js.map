{"version":3,"sources":["components/TextBox/TextBox.module.css","components/TextBox/TextBox.js","libs/socketClient.js"],"names":["module","exports","useStyles","makeStyles","TextInput","font","padding","TextRoot","height","Button","minWidth","emojiStyle","background","maxWidth","width","TextBox","classes","useState","showEmoji","setShowEmoji","textMessage","setTextMessage","Name","setName","handleSend","e","sockerIO","emit","name","text","className","styles","EmojiBox","disableSearchBar","onEmojiClick","event","emoji","node","document","getSelection","anchorNode","element","nodeType","parentNode","inputFlag","myNodelist","childNodes","i","length","nodeName","insertTextAtCursor","pickerStyle","onClick","root","NameBox","placeholder","fullWidth","InputLabelProps","shrink","InputProps","input","variant","value","onChange","target","MessageBox","onKeyDown","key","defaultProps","socketClient"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,WAAa,4BAA4B,SAAW,0BAA0B,UAAY,6B,sLCc5KC,EAAYC,YAAW,CAC3BC,UAAW,CACTC,KAAM,SACNC,QAAS,mBAEXC,SAAU,CACRC,OAAQ,QAEVC,OAAQ,CACNH,QAAS,MACTI,SAAU,iBAGRC,EAAa,CAAEC,WAAY,YAAaC,SAAU,QAASH,SAAU,QAASI,MAAO,OAAQN,OAAQ,QAErGO,EAAU,WACd,IAAMC,EAAUd,IAEhB,EAAkCe,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAeMC,EAAa,SAACC,GAClBN,GAAa,GACbE,EAAe,IACfC,GAAQF,GAAeM,IAASC,KAAK,UAAU,CAACC,KAAKN,EAAKO,KAAKT,KAGjE,OACE,sBAAKU,UAAWC,IAAOhB,QAAvB,UACGG,GACC,qBAAKY,UAAWC,IAAOC,SAAvB,SASE,cAAC,IAAD,CAAaC,kBAAkB,EAAMC,aA/BxB,SAACC,EAAD,GAKnB,IAL0C,IAAbC,EAAY,EAAZA,MACzBC,EAAOC,SAASC,eAAeC,WAC7BC,EAA4B,IAAlBJ,EAAKK,SAAiBL,EAAKM,WAAaN,EACpDO,GAAY,EACVC,EAAaJ,EAAQK,WAClBC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,IACP,UAA3BF,EAAWE,GAAGE,WACfL,GAAY,GAGhBA,GAAaM,YAAmBT,EAASL,IAqBgCe,YAAcxC,MAGrF,8BACE,cAAC,IAAD,CACEyC,QAAS,WACPjC,GAAcD,IAEhBF,QAAS,CAEPqC,KAAMrC,EAAQP,QANlB,SASE,cAAC,IAAD,QAGJ,qBAAKqB,UAAWC,IAAOuB,QAAvB,SACE,cAAC,IAAD,CAIEC,YAAY,OACZC,WAAS,EACTC,gBAAiB,CACfC,QAAQ,GAEVC,WAAY,CACV3C,QAAS,CAEP4C,MAAO5C,EAAQZ,YAGnByD,QAAQ,WACRC,MAAOxC,EACPyC,SAAU,SAACtC,GAAD,OAAOF,EAAQE,EAAEuC,OAAOF,YAGtC,qBAAKhC,UAAWC,IAAOkC,WAAvB,SACE,cAAC,IAAD,CAIEV,YAAY,UACZC,WAAS,EACTC,gBAAiB,CACfC,QAAQ,GAEVC,WAAY,CACV3C,QAAS,CAEP4C,MAAO5C,EAAQZ,YAGnByD,QAAQ,WACRE,SAAU,SAACtC,GAAD,OAAOJ,EAAeI,EAAEuC,OAAOF,QACzCI,UAAW,SAACzC,GAAiB,UAAVA,EAAE0C,KAAmB3C,KACxCsC,MAAO1C,MAGX,8BACE,cAAC,IAAD,CACEJ,QAAS,CAEPqC,KAAMrC,EAAQP,QAEhB2C,QAAW5B,EALb,SAOE,cAAC,IAAD,YASVT,EAAQqD,aAAe,GAERrD,a,gCCjJf,YAGaW,EAHb,MAGwB2C,GAFT,UAIA3C","file":"static/js/6.c7a95028.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextBox\":\"TextBox_TextBox__dmVzp\",\"NameBox\":\"TextBox_NameBox__1G32S\",\"MessageBox\":\"TextBox_MessageBox__tqkA4\",\"EmojiBox\":\"TextBox_EmojiBox__24gUd\",\"PickerBox\":\"TextBox_PickerBox__2zQba\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport InsertEmoticon from '@material-ui/icons/InsertEmoticon';\nimport EmojiPicker from 'emoji-picker-react';\nimport insertTextAtCursor from 'insert-text-at-cursor';\n\nimport styles from './TextBox.module.css';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport sockerIO from '../../libs/socketClient';\n\nconst useStyles = makeStyles({\n  TextInput: {\n    font: 'inhert',\n    padding: '0px 3px 0px 3px'\n  },\n  TextRoot: {\n    height: '100%',\n  },\n  Button: {\n    padding: '0px',\n    minWidth: 'max-content'\n  }\n});\nconst emojiStyle = { background: '#51515196', maxWidth: '400px', minWidth: '300px', width: '30vw', height: '70vh' }\n\nconst TextBox = () => {\n  const classes = useStyles();\n\n  const [showEmoji, setShowEmoji] = useState(false);\n  const [textMessage, setTextMessage] = useState('');\n  const [Name, setName] = useState('');\n\n  const onEmojiClick = (event, { emoji }) => {\n    var node = document.getSelection().anchorNode;\n    const element = node.nodeType === 3 ? node.parentNode : node\n    let inputFlag = false\n    const myNodelist = element.childNodes\n    for (let i = 0; i < myNodelist.length; i++) {\n      if(myNodelist[i].nodeName === 'INPUT'){\n        inputFlag = true;\n      }\n    }\n    inputFlag && insertTextAtCursor(element, emoji)\n  };\n\n  const handleSend = (e) => {\n    setShowEmoji(false);\n    setTextMessage('');\n    Name && textMessage && sockerIO.emit('message',{name:Name,text:textMessage});\n  }\n\n  return (\n    <div className={styles.TextBox}>\n      {showEmoji &&\n        <div className={styles.EmojiBox}>\n          {/* <Button\n            classes={{\n              // label: classes.Button,\n              root: classes.Button\n            }}\n          >\n            Hide\n          </Button> */}\n          <EmojiPicker disableSearchBar={true} onEmojiClick={ onEmojiClick } pickerStyle={ emojiStyle } />\n        </div>\n      }\n      <div>\n        <Button\n          onClick={() => {\n            setShowEmoji(!showEmoji); //Toggle Emoji tray from hide and display\n          }}\n          classes={{\n            // label: classes.Button,\n            root: classes.Button\n          }}\n        >\n          <InsertEmoticon />\n        </Button>\n      </div>\n      <div className={styles.NameBox}>\n        <TextField\n          // classes={{\n          //   root: classes.TextRoot\n          // }}\n          placeholder=\"Name\"\n          fullWidth\n          InputLabelProps={{\n            shrink: true,\n          }}\n          InputProps={{\n            classes: {\n              // root: classes.TextRoot, // Useless\n              input: classes.TextInput\n            }\n          }}\n          variant=\"outlined\"\n          value={Name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n      <div className={styles.MessageBox}>\n        <TextField\n          // classes={{\n          //   root: classes.TextRoot\n          // }}\n          placeholder=\"Message\"\n          fullWidth\n          InputLabelProps={{\n            shrink: true,\n          }}\n          InputProps={{\n            classes: {\n              // root: classes.TextRoot, // Useless\n              input: classes.TextInput\n            },\n          }}\n          variant=\"outlined\"\n          onChange={(e) => setTextMessage(e.target.value)}\n          onKeyDown={(e) => {e.key === 'Enter' && handleSend(e)}}\n          value={textMessage}\n        />\n      </div>\n      <div>\n        <Button\n          classes={{\n            // label: classes.Button,\n            root: classes.Button\n          }}\n          onClick = {handleSend}\n        >\n          <SendIcon />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nTextBox.propTypes = {};\n\nTextBox.defaultProps = {};\n\nexport default TextBox;\n","\r\nimport socketClient from 'socket.io-client'\r\nconst SERVER = \"wss://\";\r\n\r\nexport const sockerIO = socketClient(SERVER);\r\n\r\nexport default sockerIO"],"sourceRoot":""}